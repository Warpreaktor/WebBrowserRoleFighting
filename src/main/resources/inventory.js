const HOST = "http://localhost:4568";

document.addEventListener("DOMContentLoaded", () => {

    loadInventory();

    document.querySelectorAll(".inventory-slot, .slot").forEach(slot => {
        slot.addEventListener("dragover", dragOver);
        slot.addEventListener("drop", drop);
    });

    fetch(`${HOST}/getPlayer/statistic/player1`)
        .then(response => response.json())
        .then(data => updateCharacterStats(data))
        .catch(error => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", error));
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
function loadInventory() {
    fetch(`${HOST}/inventory`)
        .then(response => response.json())
        .then(data => {
            console.log("üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:", data);
            renderInventory(data.inventory.cells);
            renderEquipment(data.equipment);
            updateCharacterStatsFromServer(); // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        })
        .catch(error => console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:", error));
}


// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
function renderInventory(cells) {
    const inventoryGrid = document.querySelector(".inventory-grid");
    inventoryGrid.innerHTML = "";
    console.log("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è...");

    cells.forEach((item, index) => {
        const inventorySlot = document.createElement("div");
        inventorySlot.classList.add("inventory-slot");
        inventorySlot.dataset.index = index;

        inventorySlot.addEventListener("dragover", dragOver);
        inventorySlot.addEventListener("drop", drop);

        if (item !== null) {
            const itemElement = document.createElement("img");
            itemElement.src = item.picture;
            itemElement.alt = item.name;
            itemElement.classList.add("item");
            itemElement.setAttribute("draggable", "true");
            itemElement.dataset.id = item.id;

            itemElement.addEventListener("dragstart", event => {
                dragStart(event, item);
            });

            inventorySlot.appendChild(itemElement);
        }

        inventoryGrid.appendChild(inventorySlot);
    });
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
function renderEquipment(equipment) {
    document.querySelector(".right-hand").innerHTML = "";
    if (equipment.rightHand) {
        const weapon = document.createElement("img");
        weapon.src = equipment.rightHand.picture;
        weapon.alt = equipment.rightHand.name;
        weapon.classList.add("item");
        weapon.setAttribute("draggable", "true");
        weapon.dataset.id = equipment.rightHand.id;

        weapon.addEventListener("dragstart", event => {
            dragStart(event, equipment.rightHand);
        });

        document.querySelector(".right-hand").appendChild(weapon);
    }
}

function updateCharacterStatsFromServer() {
    fetch(`${HOST}/getPlayer/statistic/player1`)
        .then(response => response.json())
        .then(data => {
            console.log("üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", data);
            updateCharacterStats(data);
        })
        .catch(error => console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", error));
}

function updateCharacterStats(data) {
    document.getElementById("char-name").textContent = data.name;
    document.getElementById("char-class").textContent = data.heroClass;
    document.getElementById("char-hp").textContent = Math.floor(data.health);
    document.getElementById("char-max-hp").textContent = Math.floor(data.maxHealth);
    document.getElementById("char-mage-shield").textContent = Math.floor(data.shield);
    document.getElementById("char-max-mage-shield").textContent = Math.floor(data.maxShield);
    document.getElementById("char-accuracy").textContent = data.accuracy.toFixed(1);
    document.getElementById("char-agility").textContent = data.agility.toFixed(1);
    document.getElementById("char-evasion").textContent = data.evasion.toFixed(1);
    document.getElementById("char-fullDamage").textContent = Math.floor(data.damage.fullDamage);
    document.getElementById("char-physicalDamage").textContent = Math.floor(data.damage.physicalDamage);
    document.getElementById("char-fireDamage").textContent = Math.floor(data.damage.fireDamage);
}

// –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
function dragOver(event) {
    event.preventDefault();
}


// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
function dragStart(event, itemData) {
    if (!itemData || !itemData.id) {
        console.error("–û—à–∏–±–∫–∞: itemData –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ID!");
        return;
    }
    event.dataTransfer.setData("application/json", JSON.stringify(itemData));
    console.log("–ü—Ä–µ–¥–º–µ—Ç —Å—Ö–≤–∞—á–µ–Ω:", itemData);
}

// –û—Ç–ø—É—Å–∫–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
function drop(event) {
    event.preventDefault();
    console.log("üü¢ –°–æ–±—ã—Ç–∏–µ drop —Å—Ä–∞–±–æ—Ç–∞–ª–æ!");

    const jsonData = event.dataTransfer.getData("application/json");

    if (!jsonData || jsonData.trim() === "") {
        console.error("–û—à–∏–±–∫–∞: event.dataTransfer –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç JSON.");
        return;
    }

    let itemData;
    try {
        itemData = JSON.parse(jsonData);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", error);
        return;
    }

    const objectId = itemData.id;
    const targetSlot = event.target;
    const previousSlot = document.querySelector(`[data-id="${objectId}"]`)?.closest(".slot, .inventory-slot");

    let oldSlot = previousSlot ?
        (previousSlot.dataset.slot || `INVENTORY_${previousSlot.dataset.index}`)
        : null;
    let newSlot = null;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–ª–µ–≤–æ–π —Å–ª–æ—Ç —è—á–µ–π–∫–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    if (targetSlot.classList.contains("inventory-slot") && targetSlot.dataset.index) {
        newSlot = `INVENTORY_${targetSlot.dataset.index}`;
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–ª–µ–≤–æ–π —Å–ª–æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–æ—á–Ω—ã–º —Å–ª–æ—Ç–æ–º
    else if (targetSlot.classList.contains("slot") && targetSlot.dataset.slot) {
        newSlot = targetSlot.dataset.slot;
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –ø–æ–ø–∞–¥–∞–µ—Ç –Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞—Ä—Ç–∏–Ω–∫–∞ –≤ `right-hand`)
    else if (targetSlot.parentElement) {
        if (targetSlot.parentElement.classList.contains("slot") && targetSlot.parentElement.dataset.slot) {
            newSlot = targetSlot.parentElement.dataset.slot;
        } else if (targetSlot.parentElement.classList.contains("inventory-slot") && targetSlot.parentElement.dataset.index) {
            newSlot = `INVENTORY_${targetSlot.parentElement.dataset.index}`;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ª–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –Ω–æ–≤—ã–π —Å–ª–æ—Ç
    if (!newSlot) {
        console.error(`–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–≤—ã–π —Å–ª–æ—Ç! oldSlot: ${oldSlot}, newSlot: ${newSlot}`);
        returnItemToPreviousSlot(event);
        return;
    }

    if (oldSlot === newSlot) {
        console.log(`–ü—Ä–µ–¥–º–µ—Ç –æ—Å—Ç–∞–ª—Å—è –≤ —Ç–æ–º –∂–µ –º–µ—Å—Ç–µ: ${newSlot}, –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω—É–∂–µ–Ω.`);
        return;
    }

    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ /hero/dropItem: oldSlot ${oldSlot}, newSlot ${newSlot}`);

    fetch(`${HOST}/hero/dropItem/`, {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            playerId: "player1",
            objectId: objectId,
            oldSlot: oldSlot,
            newSlot: newSlot
        })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞!");
        }
        return response.json();
    })
    .then(data => {
        console.log("‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (dropItem):", data);
        loadInventory();
    })
    .catch(error => {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞:", error);
        returnItemToPreviousSlot(event);
        loadInventory();
    });
}

// –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ—Å—Ç–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
function returnItemToPreviousSlot(event) {
    const jsonData = event.dataTransfer.getData("application/json");

    if (!jsonData || jsonData.trim() === "") {
        console.error("–û—à–∏–±–∫–∞: event.dataTransfer –ø—É—Å—Ç, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –ø—Ä–µ–¥–º–µ—Ç.");
        return;
    }

    let itemData;
    try {
        itemData = JSON.parse(jsonData);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –ø—Ä–µ–¥–º–µ—Ç–∞:", error);
        return;
    }

    const objectId = itemData.id;
    const previousSlot = document.querySelector(`[data-id="${objectId}"]`)?.closest(".slot, .inventory-slot");

    if (previousSlot) {
        previousSlot.appendChild(document.querySelector(`[data-id="${objectId}"]`));
    } else {
        console.error("–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ—Å—Ç–æ!");
    }
}
