package tools;

import dto.MinMax;
import dto.damage.DamageDto;
import hero.Hero;
import mechanic.Damage;
import mechanic.interfaces.Attackable;
import mechanic.interfaces.Defensible;

import java.util.Random;

/**
 * üé≤
 */
public class Dice {

    private static final Random random = new Random();

    public static double getChance() {
        return random.nextDouble();
    }

    /**
     * –ú–µ—Ç–æ–¥ —Å–æ–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —á—Ç–æ-–Ω–∏–±—É–¥—å... –Ω–∞ –≤—Å—ë —á—Ç–æ —É–≥–æ–¥–Ω–æ, —É —á–µ–≥–æ –∏–º–µ–µ—Ç—Å—è –Ω–µ–∫–æ—Ç–æ—Ä—ã–π —à–∞–Ω—Å.
     * –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä, –±–ª–æ–∫, —É–∫–ª–æ–Ω–µ–Ω–∏–µ, –Ω–∞–ª–æ–∂–∏—Ç—å —à–æ–∫ –∏–ª–∏ —è–¥.
     *
     * @param chance —à–∞–Ω—Å –≥–µ—Ä–æ—è —Å–æ–≤–µ—Ä—à–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø–æ–¥–≤–µ—Ä–≥–Ω—É—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–µ.
     *
     * @return true –µ—Å–ª–∏ –ø–æ–ø—ã—Ç–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ–π.
     */
    public static boolean tryTo(double chance) {
        double dice = getChance();

        return chance >= dice;
    }

    public static int rollSix() {
        return randomInt(6) + 1;
    }

    public static int rollThree() {
        return randomInt(3) + 1;
    }

    public static int rollTen() {
        return randomInt(9) + 1;
    }

    public static int rollHundred() { return randomInt(100) + 1;}

    /**
     * –í–æ–∑—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç –Ω—É–ª—è –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä–∞–Ω–∏—Ü—ã size (–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
     *
     * @param size –≥—Ä–∞–Ω–∏—Ü–∞ –≤ —Ä–∞–º–∫–∞—Ö –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ —á–∏—Å–ª–æ
     */
    public static int randomInt(int size) {
        return random.nextInt(size);
    }

    /**
     * –í–æ–∑—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
     *
     * @param minMax –≥—Ä–∞–Ω–∏—Ü—ã –≤ —Ä–∞–º–∫–∞—Ö –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ —á–∏—Å–ª–æ
     */
    public static double byMinMaxChance(MinMax minMax) {

        if (minMax.getMax() <= 0d) {
            return 0d;
        }

        return random.nextDouble(minMax.getMin(), minMax.getMax() + 1);
    }

    /**
     * –ú–µ—Ç–æ–¥ –±–µ—Ä—ë—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤ –∏–≥—Ä–µ —Ç–∏–ø—ã —É—Ä–æ–Ω–∞ –∏ —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏—Ö –Ω–∞ —à–∞–Ω—Å –ø–æ –ú–∏–Ω –ú–∞–∫—Å.
     *
     * @param damage —É—Ä–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å –ø–æ –ú–∏–Ω –ú–∞–∫—Å
     *
     * @return –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–æ–ø–∏—è DamageDto –æ–±—ä–µ–∫—Ç
     */
    public static DamageDto byMinMaxChance(Damage damage) {

        return DamageDto
                .builder()
                .piercing(byMinMaxChance(damage.getPiercing()))
                .cutting(byMinMaxChance(damage.getCutting()))
                .crushing(byMinMaxChance(damage.getCrushing()))
                .fire(byMinMaxChance(damage.getFire()))
                .electric(byMinMaxChance(damage.getElectric()))
                .build();
    }

    /**
     * –ê—Ç–∞–∫—É—é—â–∏–π –ø—Ä–≤–æ–¥–∏—Ç –ø–æ–ø—ã—Ç–∫—É –ø–æ–ø–∞—Å—Ç—å –ø–æ –≤—Ä–∞–≥—É.
     *
     * @param attacker –∞—Ç–∞–∫—É—é—â–∏–π –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ø–∞—Å—Ç—å
     * @param defender –∑–∞—â–∏—â–∞—é—â–∏–π—Å—è –ø—ã—Ç–∞–µ—Ç—Å—è —É–≤–µ—Ä–Ω—É—Ç—å—Å—è
     *
     * @return true –µ—Å–ª–∏ –∞—Ç–∞–∫—É—é—â–∏–π –ø–æ–ø–∞–ª
     */
    public static boolean tryToHit(Attackable attacker, Defensible defender) {
        double roll = rollHundred();

        return roll <= hitChance(attacker, defender);
    }

    /**
     * –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞: —à–∞–Ω—Å –ø–æ–ø–∞–¥–∞–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–∑–Ω–∏—Ü—ã —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –ª–æ–≤–∫–æ—Å—Ç–∏
     * –ï—Å–ª–∏ accuracy –Ω–∞–º–Ω–æ–≥–æ –≤—ã—à–µ agility, —à–∞–Ω—Å –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ 100%.
     * –ï—Å–ª–∏ agility –≤—ã—à–µ, —à–∞–Ω—Å —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è.
     * –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–≤–Ω—ã, —à–∞–Ω—Å –±—É–¥–µ—Ç –æ–∫–æ–ª–æ 50%.
     */
    public static double hitChance(Attackable attacker, Defensible defender) {
        var accuracy = attacker.getAccuracy();
        var evasion = defender.getEvasion();

        return 100 / (Math.exp((evasion - accuracy) / 10.0));
    }

    /**
     * –°—á–∏—Ç–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–π —É—Ä–æ–Ω –∏—Å—Ö–æ–¥—è –∏–∑ —à–∞–Ω—Å–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è
     */
    public static double expectedDamage(Damage realDamage, Hero attacker, Hero defender) {

        var damageDto = Dice.byMinMaxChance(realDamage);
        double averageDamage = damageDto.getSumDamage();

        double hitChancePercent = Dice.hitChance(attacker, defender);
        double hitChance = hitChancePercent / 100.0;

        return averageDamage * hitChance;
    }
}
