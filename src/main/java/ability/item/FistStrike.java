package ability.item;

import config.ApplicationProperties;
import core.GameMaster;
import dto.attack.AttackDto;
import enums.AbilityType;
import fight.FightService;
import hero.Hero;
import item.weapon.Fist;
import lombok.Getter;
import ability.Ability;

import static constants.AbilityGameWeight.FIST_STRIKE_GW;
import static enums.AbilityType.ENEMY_TARGET;
import static tools.Dice.byMinMaxChance;

/**
 * –£–¥–∞—Ä –∫—É–ª–∞–∫–æ–º
 */
public class FistStrike extends Ability {

    private static final String PICTURE_PATH = ApplicationProperties.getHost() + "/images/ability/item/fist_strike.png";

    private static final String NAME = "–£–¥–∞—Ä –∫—É–ª–∞–∫–æ–º";

    private static final AbilityType TYPE = ENEMY_TARGET;

    private static final String DESCRIPTION = "–ë—å—ë—Ç –∫—É–ª–∞–∫–æ–º –∫–∞–∫ –¥—Ä–æ–±—è—â–∏–º —É—Ä–æ–Ω–æ–º!";

    private static final int COST = 1;

    private static final int COOL_DOWN = 0;

    /**
     * –ò–≥—Ä–æ–≤–æ–π –≤–µ—Å —É–º–µ–Ω–∏—è. –ü–æ —Å—É—Ç–∏ —ç—Ç–æ —Ç–æ, –Ω–∞ —Å–∫–æ–ª—å–∫–æ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è –º–æ—â—å –∏ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å —ç—Ç–æ–≥–æ —É–º–µ–Ω–∏—è –≤ –±–æ—é.
     */
    @Getter
    private final int gameWeight = FIST_STRIKE_GW;

    //==================================================//
    // ‚ñà‚ñà‚ñà       üí¢ –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –°–í–û–ô–°–¢–í–ê üí¢        ‚ñà‚ñà‚ñà //
    //==================================================//
    /**
     * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–º–µ—Ç–µ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å.
     */
    @Getter
    private final Fist owner;

    public FistStrike(Fist abilityOwner) {
        super(PICTURE_PATH, NAME, TYPE, DESCRIPTION, COST, COOL_DOWN);

        this.owner = abilityOwner;
    }

    @Override
    public void apply(Hero target) {
        var journal = FightService.getInstance().getResult();

        var damageDto = byMinMaxChance(owner.getDamage());

        var attack = new AttackDto(damageDto, "–î–´–© –∫—É–ª–∞–∫–æ–º!");

        journal.addEventAndLog(attack.getMessage());

        var defense = target.defense(attack);

        journal.addEventAndLog(defense.getMessage());

        owner.exhaustion(getCost());

        coolDown();

    }

    @Override
    public void trigger() {
        // do nothing
    }
}
